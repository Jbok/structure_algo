Red Black Tree

Binary Search Tree의 자료가 편향되어 있으면 최악의 시간 복잡도가 O(n)갖기 때문에 좋지 못하다.
(하지만, 랜덤한 자료를 저장한다면 기대값에 의해서 O(log n)의 시간 복잡도를 갖는다.)
그렇지만 현실에서는 랜덤한 자료를 사용하기 보다는 이미 어느정도 연관성이 있는 자료를 사용하기 때문에 
위에서 말한 단점을 완전히 무시할 수는 없다.
따라서 트리에 자료를 삽입하고 삭제를 할때 트리의 균형을 어느정도 맞춰 줄 수 있는 작업을 해줘서 시간 복잡도를 유지한다.
그 중 하나의 예가 레드-블랙 트리이다.

#Red-Black Tree
1. 이진탐색트리의 일종
2. 균형잡힌 트리: 높이가 O(log n)
3. SEARCH, INSERT, DELETE 연산을 최악의 경우에도 O(log n)시간에 지원
*INSERT와 DELETE 연산에 추가적인 작업을 통해서 트리의 균형을 맞춰준다.

#구현.
1. 각 노드는 key, left, right, parent 주소를 저장(부모 노드의 경우 생략이 가능하다.)
2. 자식노드가 존재하지 않을 경우 NIL 노드라고 부르는 특수한 노드가 있다고 가정한다.
3. 따라서 모든 리프노드는 NIL노드
4. 루트의 부모도 NIL노드라고 가정
5. 노드들은 내부노드와 NIL노드로 분류
*NIL노드는 실제로 구현하는 노드가 아니고 이해를 쉽게하기 위해서 가상으로 가정하는 노드이다.

#정의.
1. 각 노드는 red혹은 black이고,
2. 루트노드는 black이고,
3. 모든 리프노드(즉, NIL노드)는 black이고,
*4. red노드의 자식노드들은 전부 black이고(즉, red노드는 연속되어 등장하지 않고), 
*가장 중요한 조건!
5. 모든 노드에 대해서 그 노드로부터 자손인 리프노드에 이르는 모든 경로에는 동일한 개수의 black노드가 존재해야한다.

#높이.
1. 노드 x의 높이 h(x)는 자신으로부터 리프노드까지의 가장 긴 경로에 포함된 edge의 개수이다.(NIL노드 까지 포함해서 카운트)
2. 노드 x의  블랙-높이 bh(x)는 x로부터 리프노드까지의 경로상의 블랙 노드의 개수이다. (자신은 불포함)
3. 높이가 h인 노드의 블랙-높이는 bh>=h/2 이다.(정의 4번)
4. 노드 x를 루트로하는 임의의 부트리는 적어도 2^bh(x) - 1 개의 내부노드를 포함한다.(수학적 귀납법)
5. n개의 내부노드를 가지는 레드블랙트리의 높이는 2*log(n+1)이하이다.

#기본연산.
Left and Right Rotation (노드의 뱡향을 바꾸는 연산)
시간복잡도 O(1), 이진탐색트리의 특성을 유지함.(부모 자식노드의 크기 비교)
	x                           y
        a     y      =====>    x     r
           b     r               a    b
Left Rotation의 가정
1. y = right[x] != NIL이라고 가정
2. 루트노드의 부모는 NIL이라고 가정





#Insert.
기존의 BST의 INSERT 과정과 동일하게 진행한 후 추가된 노드의 COLOR을 RED로 지정한 이후 RB-INSERT-FIXUP과정을 거친다
#RB-INSERT-FIXUP (정의와 비교)
1. OK
2. 만약 z가 루트노드라면 위반, 아니라면 OK. #RR위반
3. OK.
*4. z의 부모 p[z]가 RED이면 위반.  #RR위반!
*새로 추가된 z노드는 BST Insert에서 NIL노드를 제외하고 LEAF 노드에 들어가기 때문에 자식노드는 고려하지 않아도됨.
**5. OK
**새로 추가된 z노드의 색이 RED이므로 고려하지 않아도 됨.

===================================
#RR 위반. (정의 4.)
종료조건: 부모노드 P[z]가 black이 되면 종료한다. 
===================================
총 6가지 case로 나누어서 생각
CASE1, 2, 3 =>P[z]가 P[P[z]]의 왼쪽 자식인 경우 (할아버지 노드가 존재하는 이유는 red노드는 root가 될 수 없기 때문이다.)
CASE4, 5, 6 =>P[z]가 P[P[z]]의 오른쪽 자식인 경우 (할아버지 노드가 존재하는 이유는 red노드는 root가 될 수 없기 때문이다.)
//CASE 1, 2, 3는 CASE 4, 5, 6과 대칭이다.

CASE1: z의 삼촌(할아버지의 오른쪽 자식노드)이 red인 경우
=> 부모 노드와 삼촌 노드를 black으로 바꾸고 할아버지 노드를 red로 바꾼다.
이때 할아버지 원래 색은 black이었기 때문에 부모 노드가 red 일 수 있으므로 z노드를 할아버지 노드로 바꿔서 진행한다.
RR위반 계속 진행

CASE2, CASE3: z의 삼촌(할아버지의 오른쪽 자식노드)이 BLACK인 경우
CASE2: z가 오른쪽 자식인 경우
p[z]에 대해서 left-rotation한 후 원재 p[z]를 z로 바꿔서 CASE3로 진행한다.
CASE3: z가 왼쪽 자식인 경우
p[z]를 black, p[p[z]]를 red로 바꿈. p[p[z]]에 대해서 right-rotation
RR위반 해결 완료
====================================

#INSERT의 시간복잡도
1. BST의 INSERT: O(log n)
2. RB-INSERT-FIXUP
  1)경우1 : z가 2레벨 상승
  2)경우 2,3: O(1)
  3)트리의 높이에 비례하는 시간
3. 즉, INSERT의 시간복잡도는 O(log n)





#delete
기본의 BST의 DELETE 과정과 동일하게 진행한 후 삭제된 노드 y가 red였으면 종료.(정의와 비교)
y가 BLACK일 경우 RB-DELETE-FIXUP을 호출한다. (매개변수 x는 y의 자식노드 -> 삭제되는 y노드의 자리에 들어오는 값)

#RB-DELETE-FIXUP (정의와 비교)
1. OK.
2. y가 루트였고 x가 red인 경우 위반
3. OK.
4. p[y]와 x가 모두 red일 경우 위반
5. 원래 y를 포함했던 모든 경로는 이제 black노드가 하나 부족하다.
  1) 노드 x에 "extra black"을 부여해서 조건 5를 만족
  2) 노드 x는 "double black" 혹은 "red & black"


#아이디어:
1. extra black을 트리의 위쪽으로 올려보냄
2. x가 red & black 상태가 되면 그냥 black 노드로 만들고 끝냄
3. x가 루트가 되면 그냥 extra balck을 제거
#Loop Invariant
1. x는 루트가 아닌 double-black노드
2. w는 x의 형제노드
3. w는 NIL 노드가 될 수 없음 (x의 부모에 대해서 정의5가 위반되기때문에) 
//w가 NIL노드면 BLACK이 하나인데 x는 double-black이므로 논리에 맞지 않다.

=================================
총 8가지 CASE로 경우가 나뉘어짐.
CASE.1,2,3,4: x가 부모의 왼쪽 자식 노드인 경우
CASE.5,6,7,8: x가 부모의 오른쪽 자식 노드인 경우 //CASE 1,2,3,4에 대칭

#CASE 1: w가 red인 경우  (w는 x의 형제 노드)
**x는 black노드일 수도 NIL! 일수도 있다.
1. w의 자식들은 black
2. w를 black으로, p[x]를 red로
3. p[x]에 대해서 left-rotation 적용
4. x의 새로운 형제노드는 원래 w의 자식노드, 따라서 black노드
5. case 2,3, 혹은 4에 해당

#CASE 2: w는 black, w의 자식들도 black
1. x의 extra-black를 뺏고, w를 red로 바꿈.
2. p[x]에게 뺏은 extra-black을 준다.
3. p[x]를 새로운 x로 해서 계속
4. 만약 CASE1에서 이 CASE에 도달했다면 p[x]는 red였고 따라서 새로운 x는 red&black이 되어서 종료

#CASE 3: w는 black, w의 왼쪽 자식이 red
1. w를 red로, w의 왼쪽자식을 black으로
2. w에 대해서 right-rotation적용
3. x의 새로운 형제 w는 오른자식이 red: CASE 4에 해당

#CASE 4: w는 black, w의 오른쪽자식이 red
1. w의 색을 현재 p[x]의 색으로 (unknown color)
2. p[x]를 black으로, w의 오른쪽 자식을 black으로
3. p[x]에 대해서 left-rotation 적용
4. x의 extra-black을 제거하고 종료

#DELETE의 시간복잡도
BST에서의 DELETE: O(log n)
RB-DELETE-FIXUP: O(log n)


