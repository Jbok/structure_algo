
//Postfix ADT
1. create an empty stack of integers.
2. while there remains a token
3. 	get the next token;
4.	if the token is an oeprand
5.		push the opreand on the stack;
6.	else if the token is an operator
7.		pop the right opreand off the stack;
8.		pop the left operand off the stack;
9.		evaluate the operation;
10.		push the result onto the stack;
11.	pop the stack and return the result;


//Convert infix to postfix
1. Initialize postifx to an empty string;
2. Create the operator stack;
3.	while there are more tokens in the in fix expression
4.		Get the next token;
5.		if the next token is an operand
6.			Append it to postfix;
7.		else if the next token is an operator
8.			call process_operator to process the operator;
9.		else
10.			Indicate a syntax error.
11. Pop the remaining operators off the operator stack and append them to postfix;


//Algorithm for process_operator
1. if the operator stack is empty
2.		Push the current operator onto the stack;
3. else
4.		Peek the operator stack and let top_op be the top operator;
5.		if the precedence of the current operator is greager that that of top_op
6.			Push the current operator onth the stack;
7.		else
8.			while the stack is not empty and the precedence of the current operator is less than or equla to the precedence of top_op
9.				Pop top_op off the stack and append it to postfix;
10.				if the operatot stack is not empty
11.					Peek the operator stack and let top_op be the top operator;
12.			Push the current operator onto the stack;