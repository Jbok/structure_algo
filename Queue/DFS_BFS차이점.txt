깊이 우선 탐색 (Depth First Search)
현재 정점에 연결된 정점이 존재하면 계속 이동한다.
방문한 정점을 재귀호출을 이용해서 스택에 저장한다.
재귀호출을 이용하면 할수록 깊은 정점의 위치에 들어간다.
너무 깊게 들어가면 overflow 발생한다.
막히면 나아갈 곳이 있는 곳으로 돌아간다 -> 백트래킹
유용 : 사이클 탐지(Cycle Detection), 위상 정렬(Topological Sorting)
장점 : 무한히 넓은 트리에 효과적이다.
단점 : 목표 노드가 없는 경로에 깊이 빠질 수 있다.

너비 우선 탐색 (Breadth First Search)
생성된 순서에 따라 노드를 확장한다.
시작 정점을 출발로 큐 구조에 방문한 정점을 넣어가며 탐색을 한다.
시작 지점을 기준으로 같은 거리에 있는 노드들을 작은 거리에서 부터 탐색한다. ->장점과 단점의 직접적인 원인.
시작 지점을 기준으로 동심원 형태로 탐색을 수행한다. 
한 정점에 연결된 모든 정점의 탐색이 끝나면 그 정점을 큐에서 제거한다.
그리고 큐의 다음 정점을 꺼내서 그 정점에 연결된 모든 정점을 탐색한다.
많은 기억 공간이 필요하다.
유용 : 최소신장트리(Minimum Spanning Trees), 최단경로(Shortest Paths)
장점 : 무한히 깊거나 무한에 가까운 트리인 경우에 효과적이다.
단점 : 목표 노드로 가는 경로들 모두가 같은 거리일 때 비효율적이다.
