제14-2강 그래프에서의 BFS

#그래프 순회(traversal)
: 그래프의 모든 노드들을 방문하는 일
대표적인 두 가지 방법
BFS(Breadth-First Search, 너비우선순회), DFS(Depth-First Search, 깊이우선순회)

#BFS
: 노드들을 출발 노드로 부터 동심원 형태로 순회하는 방법.
L0 = {s}, s는 출발 노드
L1 = L0의 모든 이웃 노드들
L2 = L1의 이웃들 중 L0에 속하지 않는 노드들
...
Li = L(i-1)의 이웃들 중 L(i-2)에 속하지 않는 노드들

*큐를 이용한 너비우선순회.
1. 시작 노드를 체크(이미 방문된 노드라는 표시)
2. 시작 노드를 큐에 insert한다.
3. 큐가 empty일때까지 반복한다.
  1) 큐에 있는 노드v를 뽑아온다.
  2) v의 체크되어 있지 않은(방문되지 않은) 이웃 노드들 큐에 넣고 체크를 한다.

#BFS와 최단 경로
: s에서 Li에 속한 노드까지의 최단 경로의 길이는 i이다. 
//BFS를 하면서 각 노드에 대해서 최단 경로의 길이를 구할 수 있다.

입력: 방향 혹은 무방향 그래프 G = (V, E), 그리고 출발 노드 S
출력: 모든 노드 V에 대해서
d[v] = s로 부터 v까지의 최단 경로의 길이(에지의 개수)
ㅠ[v] = s로부터 v까지의 최단경로상에서 v의 직전 노드(predecessor)
//BFS에 최단 경로 기능을 추가하려면 몇가지 조건들이 추가 되어야함.
1. 시작 노드 s에 대해서 d[s]=0, ㅠ[s]=null, 나머지 노드들의 d[v]는 -1로 두어서 unvisited를 의미함
2. 반복문 안에 d[v] = d[u] + 1; // distance to v, 
                 ㅠ[v]=u; //u is the predecessor of v

*최단 경로의 시간복잡도.
: 배열로 그래프를 구현한 것과 인접리스트로 구현할 경우 시간 복잡도는 다르다.
두 방식 모두 모든 노드들을 순회해야 하므로 O(n)시간이 걸리고 순회의 과정에서 각 노드들의 인접한 노드가 무엇인지
찾아야 하는데 이때 행렬의 경우 O(n)의 시간복잡도가 걸리므로 O(n^2)이 되고 인접리스트로 구현한 경우 인접한 노드를 
순회하는데 걸리는 횟수는 모든 경우를 합쳐서 2m이 되기 때문에 O(n+m)이 된다.

*BFS 트리
: 각 노드 v와 ㅠ[v]를 연결하는 에지들로 구성된 트리 //BFS 트리에서 s에서 v까지의 경로는 s에서 v까지 가는 최단 경로.
**어떤 에지도 2개의 layer를 건너가지 않는다. (동일 레이어의 노드를 연결하거나, 혹은 1개의 layer를 건너 간다.)

#너비우선순회: 최단 경로 출력하기 
PRINT-PATH(G, s, v)
 if v = s then
	print s;
 else if ㅠ[v]=NULL, then
	print "no path from s to v exists"
 else
	PRINT-PATH(G, s, ㅠ[v]);
	print v;
 end

#그래프가 disconnected이거나 혹은 방향 그래프라면 BFS에 의해서 모든 노드가 방문되지 않을 수도 있음
: BFS를 방복하여 모든 노드 방문
BFS-ALL(G)
{
	while there exists unvisited node v
		BFS(G, V);
}