#동적계획법
1. 일반적으로 최적화문제(optimisation problem)혹은 카운팅(counting)문제에 적용됨.
 : 최소값, 최대값, 최단경로
2. 주어진 문제에 대한 순환식(recurrence equation)을 정의한다.
3. 순환식을 memoization 혹은 bottom-up 방식으로 푼다.

#동적계획법 - 순환식
1. subproblem들을 풀어서 원래 문제를 푸는 방식. 그런 의미에서 분할정복법과 공통성이 있음.
2. 분할정복법에서는 분할된 문제들이 서로 disjoint하지만 동적계획법에서는 그렇지 않음.
3. 즉, 서로 overlapping하는 subproblem들을 해결함으로써 원래 문제를 해결.

*분할정복법 vs. 동적계획법
 분할정복법
 ex) quicksort의 경우 pivot을 중심으로 왼쪽과 오른쪽을 나눠서 subproblem을 해결.
     두 subproblem은 disjoint하다.
 동적계획법
 ex) 행렬경로문제의 경우. subprobleme들 사이에 disjoint 하지않다. //overlapping하는 subproblem들을 해결함.

#Optimal Substructure
: 어떤 문제의 최적해가 그것의 subproblem들의 최적해로부터 효율적으로 구해질 수 있을 때 그 문제는 optimal substructure를 가진다고 말한다.
 분할정복법, 탐욕적기법, 동적계획법은 모두 문제가 가진 이런 특성을 이용을 이용하는 알고리즘이다.

#Optimal Substructure를 확인하는 질문 //동적계획법은 순환식을 세우는것이 어렵고 중요하다.
 ex) 최단경로(shortest-path) 문제
1. "최적해의 일부분이 그부분에 대한 최적해인가?"
//s에서 u까지의 최단경로에 있는 v는 s에서 v까지의 최단경로이다.
2. "순환식은 optimal substructure를 표현한다."
// u까지 가는 최단경로의 길이는 u에 인접한 모든 정점 v에 대해서 v까지 가는 최단경로의 길이 더하게 에지 (v, u)의 가중치의 합의 최소값이다.

 ex) 최장경로(Longest-Path)문제
  -노드를 중복 방문하지 않고 가는 가장 긴 경로
  -optimal substructure를 가지는가?
: //u까지 가는 최장경로가 v를 지난다고 하더라고 그 경로상에서 v까지 가는 경로가 반드시 v까지 가는 최장경로가 아닐수도 있으므로
위의 2번째 순환식은 성립하지 않는다.
==> 그렇다고 해서 최장경로 문제가 optimal substructure를 가지고 있지 않다고 말할 수 없고 
다른 형태의 optimal substructure를 갖고 있다는 표현이 적절하다..

*최장경로의 optimal substructure
: s에서 집합 A에 속한 어떤 노드도 지나지 않고 u까지 가는 경로들 중에서 최장 경로의 길이.