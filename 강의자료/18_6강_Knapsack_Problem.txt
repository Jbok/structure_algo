#Knapsack Problem

n개의 아이템과 배낭
각각의 아이템은 무게 wi와 가격 vi를 가짐
배낭의 용량 W
*목적: 배낭의 용량을 초과하지 않으면서 가격이 최대가 되는 부분 집합을 찾는것.

#Greedy 방식
가격이 높은 것 부터 선택
무게가 가벼운 것 부터 선택
=> 단위 무게당 가격이 높은 것 부터 선택
//정답은 아니다.

#순환식
OPT(i): 아이템 1, 2, ..., i로 얻을 수 있는 최대 이득.
경우 1: 아이템 i를 선택하지 않는 경우 => OPT(i) = OPT(i-1)
경우 2: 아이템 i를 선택하는 경우 => OPT(i) = ?

OPT(i, w): 배낭 용량이 w일 때 아이템 1, 2, ..., i로 얻을 수 있느 최대 이득
경우 1: 아이템 i를 선택하지 않는 경우 => OPT(i, w) = OPT(i-1,w)
경우 2: 아이템 i를 선택하는 경우 => OPT(i, w) = OPT(i-1, w-wi) + v(i)  //조건 w-w(i) >= 0

#Bottom - up
KNAPSACK(n, W, w1, ..., w(n), v(1), ..., v(n))
FOR w = 0 to W
	M[0, w] = 0.
FOR i=1 to n
	for w=1 to W
		if( wi>w) M[i,w] = M[i-1,w]
		else	M[i,w]=max{M[i-1,w], v(i) + M[i-1,w-w(i)]}
return M[n, W]